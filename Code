import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from math import *
from pylab import *

Housing=pd.read_csv('Salary_Data - Salary_Data.csv')
Housing.head()
Housing.info()
Housing.columns
sns.pairplot(Housing)
sns.distplot(Housing['YearsExperience'])
sns.distplot(Housing['Salary'])

%LINEAR REGRESSION

x=Housing[['YearsExperience']]
y=Housing[['Salary']]
print(x.shape)
print(y.shape)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.2, random_state=10)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)
lm=LinearRegression()
lm.fit(x_train,y_train)
print(lm.intercept_)
coeff=pd.DataFrame(lm.coef_,x.columns, columns=['Coefficient'])
print(coeff)
pred=lm.predict(x_test)
print(pred)
np.round(pred,2)
y_test
plt.scatter(y_test,pred)
sns.distplot((y_test-pred),bins=20);
from sklearn import metrics
metrics.mean_absolute_error(y_test,pred)
print(metrics.mean_absolute_error(y_test,pred))
print(metrics.mean_squared_error(y_test,pred))
from sklearn.metrics import r2_score
R2= r2_score(y_test, pred)
print(R2)
plt.scatter(x_train, y_train, label='Actual')
plt.plot(x_train, lm.predict(x_train), color='red', label='Prediction')
plt.legend(loc=4)
plt.show()
print(lm.intercept_)
print(coeff)
#y= mx+c
m= lm.intercept_
c= lm.coef_
print(m,c)
a= input('enter value= ')
x=float(a)
print(x)
y = 26089.09663242*x + 9356.86299354
print('the value of the salary at the entered value of experience is:')
print(y)
